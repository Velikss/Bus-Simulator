/**
 * @file Utf8.hpp
 *
 * This module declares the Utf8::Utf8 class.
 *
 * © 2018 by Richard Walters
 */

/*Applicable to UTF8 and URI

Copyright (c) 2018 Richard Walters

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

#pragma once
#include <pch.hpp>

    /**
     * This represents a single character in Unicode.
     */
    typedef uint32_t UnicodeCodePoint;

    /**
     * This function is for convenience, converting a given ASCII string
     * into its equivalent sequence of Unicode code points.
     *
     * @param[in] ascii
     *     This is the ASCII string to convert.
     *
     * @return
     *     The Unicode code points for the given ASCII string are returned.
     */
    std::vector< UnicodeCodePoint > AsciiToUnicode(const std::string& ascii);

    /**
     * This class is used to encode or decode Unicode "code points",
     * or characters from many different international character sets,
     * in order to store or transmit them across any interface
     * that accepts a sequence of bytes.
     */
    class Utf8 {
        // Lifecycle management
    public:
        ~Utf8() noexcept;
        Utf8(const Utf8&) = delete;
        Utf8(Utf8&&) noexcept = delete;
        Utf8& operator=(const Utf8&) = delete;
        Utf8& operator=(Utf8&&) noexcept = delete;

        // Public methods
    public:
        /**
         * This is the default constructor.
         */
        Utf8();

        /**
         * This method encodes the given sequence of Unicode code
         * points into UTF-8.
         *
         * @param[in] codePoints
         *     These are the Unicode code points to encode.
         *
         * @return
         *     The UTF-8 encoding of the given Unicode code points is returned.
         */
        static std::vector< uint8_t > Encode(const std::vector< UnicodeCodePoint >& codePoints);

        /**
         * This method accepts the given sequence of UTF-8 encoded bytes,
         * and returns any Unicode code points formed from them.
         *
         * Any partial code sequence at the end is held onto and used first
         * when this method is called again later.
         *
         * This overload accepts a vector of bytes.
         *
         * @param[in] encoding
         *     This is the sequence of UTF-8 encoded bytes to shift into
         *     the decoder.
         *
         * @return
         *     All Unicode code points generated by the decoder are returned.
         */
        std::vector< UnicodeCodePoint > Decode(const std::vector< uint8_t >& encoding);

        /**
         * This method accepts the given sequence of UTF-8 encoded bytes,
         * and returns any Unicode code points formed from them.
         *
         * Any partial code sequence at the end is held onto and used first
         * when this method is called again later.
         *
         * This overload accepts a C++ string.
         *
         * @param[in] encoding
         *     This is the sequence of UTF-8 encoded bytes to shift into
         *     the decoder.
         *
         * @return
         *     All Unicode code points generated by the decoder are returned.
         */
        std::vector< UnicodeCodePoint > Decode(const std::string& encoding);

        /**
         * This method accepts the given sequence of UTF-8 encoded bytes,
         * and returns an indication of whether or not the encoding is valid.
         *
         * @param[in] encoding
         *     This is the sequence of UTF-8 encoded bytes to shift into
         *     the decoder.
         *
         * @param[in] final
         *     This flag indicates whether or not this is the end of the
         *     encoding.  If it is not, any partial code sequence at the end
         *     is held onto and used first when this method is called
         *     again later.
         *
         * @return
         *     An indication of whether or not the encoding is valid
         *     is returned.
         */
        bool IsValidEncoding(
            const std::string& encoding,
            bool final = true
        );

        // Private properties
    private:
        /**
         * This is the type of structure that contains the private
         * properties of the instance.  It is defined in the implementation
         * and declared here to ensure that it is scoped inside the class.
         */
        struct Impl;

        /**
         * This contains the private properties of the instance.
         */
        std::unique_ptr< Impl > impl_;
    };

	/**
	 * This is the Unicode replacement character (�) encoded as UTF-8.
	 */
	const std::vector< uint8_t > UTF8_ENCODED_REPLACEMENT_CHARACTER = { 0xEF, 0xBF, 0xBD }; //-V1043

	/**
	 * This is the Unicode replacement character (�) as a code point.
	 */
	const UnicodeCodePoint REPLACEMENT_CHARACTER = 0xFFFD;

	/**
	 * Since RFC 3629 (November 2003), the high and low surrogate halves
	 * used by UTF-16 (U+D800 through U+DFFF) and code points not encodable
	 * by UTF-16 (those after U+10FFFF) are not legal Unicode values, and
	 * their UTF-8 encoding must be treated as an invalid byte sequence.
	 */
	const UnicodeCodePoint FIRST_SURROGATE = 0xD800;
	const UnicodeCodePoint LAST_SURROGATE = 0xDFFF;

	/**
	 * This is the very, very, last code point in Unicode that is legal.
	 */
	const UnicodeCodePoint LAST_LEGAL_UNICODE_CODE_POINT = 0x10FFFF;

	/**
	 * This computes the logarithm (base 2) of the given integer.
	 *
	 * @param[in] integer
	 *     This is the integer for which to compute the logarithm.
	 *
	 * @return
	 *     The logarithm (base 2) of the given integer is returned.
	 */
	template< typename I > size_t log2n(I integer) {
		size_t answer = 0;
		while (integer > 0) {
			++answer;
			integer >>= 1;
		}
		return answer;
	}

	std::vector< UnicodeCodePoint > AsciiToUnicode(const std::string& ascii) {
		return std::vector< UnicodeCodePoint >(
			ascii.begin(),
			ascii.end()
			);
	}

	/**
	 * This contains the private properties of a Utf8 instance.
	 */
	struct Utf8::Impl { //-V802
		/**
		 * This is where we keep the current character
		 * that is being decoded.
		 */
		UnicodeCodePoint currentCharacterBeingDecoded = 0;

		/**
		 * This is the number of input bytes that we still
		 * need to read in before we can fully assemble
		 * the current character that is being decoded.
		 */
		size_t numBytesRemainingToDecode = 0;

		/**
		 * This is the number of input bytes total that
		 * make up the current character being decoded.
		 */
		size_t bytesTotalToDecodeCurrentCharacter = 0;

		/**
		 * This flag indicates whether or not the encoded UTF-8
		 * sequence decoded so far is valid.
		 */
		bool isValidEncoding = true;
	};

	Utf8::~Utf8() noexcept = default;

	Utf8::Utf8()
		: impl_(new Impl)
	{
	}

	std::vector< uint8_t > Utf8::Encode(const std::vector< UnicodeCodePoint >& codePoints) {
		std::vector< uint8_t > encoding;
		for (auto codePoint : codePoints) {
			const auto numBits = log2n(codePoint);
			if (numBits <= 7) {
				encoding.push_back((UnicodeCodePoint)(codePoint & 0x7F));
			}
			else if (numBits <= 11) {
				encoding.push_back((UnicodeCodePoint)(((codePoint >> 6) & 0x1F) + 0xC0));
				encoding.push_back((UnicodeCodePoint)((codePoint & 0x3F) + 0x80));
			}
			else if (numBits <= 16) {
				if (
					(codePoint >= FIRST_SURROGATE)
					&& (codePoint <= LAST_SURROGATE)
					) {
					(void)encoding.insert(
						encoding.end(),
						UTF8_ENCODED_REPLACEMENT_CHARACTER.begin(),
						UTF8_ENCODED_REPLACEMENT_CHARACTER.end()
					);
				}
				else {
					encoding.push_back((UnicodeCodePoint)(((codePoint >> 12) & 0x0F) + 0xE0));
					encoding.push_back((UnicodeCodePoint)(((codePoint >> 6) & 0x3F) + 0x80));
					encoding.push_back((UnicodeCodePoint)((codePoint & 0x3F) + 0x80));
				}
			}
			else if (
				(numBits <= 21)
				&& (codePoint <= LAST_LEGAL_UNICODE_CODE_POINT)
				) {
				encoding.push_back((UnicodeCodePoint)(((codePoint >> 18) & 0x07) + 0xF0));
				encoding.push_back((UnicodeCodePoint)(((codePoint >> 12) & 0x3F) + 0x80));
				encoding.push_back((UnicodeCodePoint)(((codePoint >> 6) & 0x3F) + 0x80));
				encoding.push_back((UnicodeCodePoint)((codePoint & 0x3F) + 0x80));
			}
			else {
				(void)encoding.insert(
					encoding.end(),
					UTF8_ENCODED_REPLACEMENT_CHARACTER.begin(),
					UTF8_ENCODED_REPLACEMENT_CHARACTER.end()
				);
			}
		}
		return encoding;
	}

	std::vector< UnicodeCodePoint > Utf8::Decode(const std::vector< uint8_t >& encoding) {
		std::vector< UnicodeCodePoint > output;
		for (auto octet : encoding) {
			if (impl_->numBytesRemainingToDecode == 0) {
				if ((octet & 0x80) == 0) {
					output.push_back(octet);
				}
				else if ((octet & 0xE0) == 0xC0) {
					impl_->numBytesRemainingToDecode = 1;
					impl_->currentCharacterBeingDecoded = (octet & 0x1F);
				}
				else if ((octet & 0xF0) == 0xE0) {
					impl_->numBytesRemainingToDecode = 2;
					impl_->currentCharacterBeingDecoded = (octet & 0x0F);
				}
				else if ((octet & 0xF8) == 0xF0) {
					impl_->numBytesRemainingToDecode = 3;
					impl_->currentCharacterBeingDecoded = (octet & 0x07);
				}
				else {
					output.push_back(REPLACEMENT_CHARACTER);
					impl_->isValidEncoding = false;
				}
				impl_->bytesTotalToDecodeCurrentCharacter = impl_->numBytesRemainingToDecode + 1;
			}
			else if ((octet & 0xC0) != 0x80) {
				output.push_back(REPLACEMENT_CHARACTER);
				impl_->isValidEncoding = false;
				impl_->numBytesRemainingToDecode = 0;
				const auto nextCodePoints = Decode(std::vector< uint8_t >{ octet });
				output.insert(
					output.end(),
					nextCodePoints.begin(),
					nextCodePoints.end()
				);
			}
			else {
				impl_->currentCharacterBeingDecoded <<= 6;
				impl_->currentCharacterBeingDecoded += (octet & 0x3F);
				if (--impl_->numBytesRemainingToDecode == 0) {
					if (
						(
						(impl_->bytesTotalToDecodeCurrentCharacter >= 2)
							&& (impl_->currentCharacterBeingDecoded < 0x00080)
							)
						|| (
						(impl_->bytesTotalToDecodeCurrentCharacter >= 3)
							&& (impl_->currentCharacterBeingDecoded < 0x00800)
							)
						|| (
						(impl_->bytesTotalToDecodeCurrentCharacter >= 4) //-V112
							&& (impl_->currentCharacterBeingDecoded < 0x10000)
							)
						) {
						output.push_back(REPLACEMENT_CHARACTER);
						impl_->isValidEncoding = false;
					}
					else {
						output.push_back(impl_->currentCharacterBeingDecoded);
					}
					impl_->currentCharacterBeingDecoded = 0;
				}
			}
		}
		return output;
	}

	std::vector< UnicodeCodePoint > Utf8::Decode(const std::string& encoding) {
		return Decode(
			std::vector< uint8_t >(
				encoding.begin(),
				encoding.end()
				)
		);
	}

	bool Utf8::IsValidEncoding(
		const std::string& encoding,
		bool final
	) {
		(void)Decode(encoding);
		auto wasValidEncoding = impl_->isValidEncoding;
		if (final) {
			if (impl_->numBytesRemainingToDecode > 0) {
				wasValidEncoding = false;
			}
			impl_->isValidEncoding = true;
			impl_->numBytesRemainingToDecode = 0;
		}
		return wasValidEncoding;
	}
